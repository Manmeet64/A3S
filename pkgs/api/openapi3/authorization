{
  "openapi": "3.0.3",
  "components": {
    "schemas": {
      "authorization": {
        "description": "TODO.",
        "properties": {
          "ID": {
            "description": "ID is the identifier of the object.",
            "readOnly": true,
            "type": "string"
          },
          "description": {
            "description": "Description of the Authorization.",
            "type": "string"
          },
          "disabled": {
            "description": "Set the authorization to be disabled.",
            "type": "boolean"
          },
          "hidden": {
            "description": "Hides the policies in children namespaces.",
            "type": "boolean"
          },
          "name": {
            "description": "The name of the Authorization.",
            "example": "my authorization",
            "type": "string"
          },
          "namespace": {
            "description": "The namespace of the object.",
            "readOnly": true,
            "type": "string"
          },
          "permissions": {
            "description": "A list of permissions.",
            "example": [
              "@auth:role=namespace.administrator",
              "namespace,get,post,put",
              "authorization,get:1234567890"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "subject": {
            "description": "A tag expression that identifies the authorized user(s).",
            "items": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "type": "array"
          },
          "subnets": {
            "description": "If set, the API authorization will only be valid if the request comes from one\nthe declared subnets.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "targetNamespaces": {
            "description": "Defines the namespace or namespaces in which the permission for subject should\napply. If empty, the object's namespace will be used.",
            "example": "/my/namespace",
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "permissions"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "name": "Antoine Mercadal"
    },
    "license": {
      "name": "TODO"
    },
    "termsOfService": "https://localhost/TODO",
    "title": "authorization",
    "version": "1.0"
  },
  "paths": {
    "/authorizations": {
      "get": {
        "description": "Retrieves the list of authorization.",
        "operationId": "get-all-authorizations",
        "parameters": [
          {
            "description": "This is an example.",
            "example": "hello == world",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/authorization"
                  },
                  "type": "array"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy",
          "a3s"
        ]
      },
      "post": {
        "description": "Creates a new authorization.",
        "operationId": "create-a-new-authorization",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy",
          "a3s"
        ]
      }
    },
    "/authorizations/{id}": {
      "delete": {
        "description": "Deletes the authorization with the given ID.",
        "operationId": "delete-authorization-by-ID",
        "parameters": [
          {
            "description": "This is an example.",
            "example": "hello == world",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy",
          "a3s"
        ]
      },
      "get": {
        "description": "Retrieves the authorization with the given ID.",
        "operationId": "get-authorization-by-ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy",
          "a3s"
        ]
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "description": "Updates the authorization with the given ID.",
        "operationId": "update-authorization-by-ID",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/authorization"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authorization"
                }
              }
            },
            "description": "n/a"
          }
        },
        "tags": [
          "policy",
          "a3s"
        ]
      }
    }
  },
  "tags": [
    {
      "description": "This tag is for group 'policy'",
      "name": "policy"
    },
    {
      "description": "This tag is for package 'a3s'",
      "name": "a3s"
    }
  ]
}
